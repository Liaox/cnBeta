package com.guest.cnbeta;

import java.io.File;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.feedback.NotificationType;
import com.feedback.UMFeedbackService;
import com.guest.cnbeta.module.Article;
import com.guest.cnbeta.module.Avatar;
import com.guest.cnbeta.service.ListService;
import com.guest.cnbeta.util.ScaleAnimationHelper;
import com.guest.cnbeta.util.Tip;
import com.guest.cnbeta.util.Util;
import com.mobclick.android.MobclickAgent;

public class MainActivity extends Activity implements OnItemClickListener {
	private ListService listService;
	private ListView listView;
	private List<Article> articleList;
	private ArticleListAdapter listAdapter;
	String[] avatarList = new String[100];
	private boolean isRefreshing;
	private ImageView splashImageView;
	private Dialog dialog;
	private Avatar avatar;
	private LinearLayout layout;
	private Animation fadeAnim;
	private Boolean showHeader = false;
	private Boolean showFooter = false;
	private String url;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.list);

		if (!Util.isNetworkAvailable(this)) {
			Toast.makeText(getApplicationContext(),
					getString(R.string.nointernet), Toast.LENGTH_SHORT).show();
		}

		fadeAnim = AnimationUtils.loadAnimation(MainActivity.this, R.anim.fade);

		splashImageView = (ImageView) findViewById(R.id.splashIV);
		listService = new ListService(MainActivity.this);
		listView = (ListView) findViewById(R.id.list);
		listView.setOnItemClickListener(MainActivity.this);

		syncArticle();

		MobclickAgent.onError(this);
		MobclickAgent.setUpdateOnlyWifi(false);
		MobclickAgent.update(this);
		UMFeedbackService.enableNewReplyNotification(this,
				NotificationType.AlertDialog);

		MobclickAgent.updateOnlineConfig(this);

		String header = MobclickAgent.getConfigParams(this, "header");
		if ("".equals(header)) {
			return;
		} else {
			if (header.equals("on")) {
				url = MobclickAgent.getConfigParams(this, "url");
				showHeader = true;
			} else {
				showHeader = false;
			}

		}

		String footer = MobclickAgent.getConfigParams(this, "footer");
		Tip.d(footer);
		if ("".equals(footer)) {
			return;
		} else {
			if (footer.equals("on")) {
				url = MobclickAgent.getConfigParams(this, "url");
				showFooter = true;
			} else {
				showFooter = false;
			}

		}

	}

	public boolean reloadArticleList() {
		if (!Util.isNetworkAvailable(this)) {
			return false;
		}
		listService.syncArticleToDb();
		return true;

	}

	public boolean syncArticleContent() {
		if (!Util.isNetworkAvailable(this)) {
			return false;
		}
		listService.offLineDownload(this);
		return true;

	}

	public void reloadListView() {

		articleList = listService.getArticleListFromDB();

		if (showHeader) {
			WebView webView = new WebView(MainActivity.this);
			webView.loadUrl(url);
			listView.addHeaderView(webView);
		}

		if (showFooter) {
			WebView webView = new WebView(MainActivity.this);
			webView.loadUrl(url);
			listView.addFooterView(webView);
		}

		listAdapter = new ArticleListAdapter(this);
		listView.setAdapter(listAdapter);

	}

	public void offLineDownload() {

		final Thread thread = new Thread(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				Looper.prepare();
				if (syncArticleContent()) {
					Message msg = new Message();
					msg.what = 1;
					handler.sendMessage(msg);
				}
			}
		});

		if (Util.isWifiConnected(this)) {
			Toast.makeText(MainActivity.this, "已经开始后台离线下载", Toast.LENGTH_LONG)
					.show();
			thread.start();
		} else {
			AlertDialog.Builder mDialog = new AlertDialog.Builder(this);
			mDialog.setMessage("Wifi未连接。是否使用手机流量进行下载？")
					.setIcon(R.drawable.icon_dialog).setTitle("cnBeta")
					.setPositiveButton("继续", new OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							thread.start();
						}
					}).setNegativeButton("算了", new OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
						}
					}).show();
		}

	}

	public void syncArticle() {

		if (isRefreshing) {

			LayoutInflater inflater = (LayoutInflater) this
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			layout = (LinearLayout) inflater.inflate(R.layout.dialog_refresh,
					null);

			ScaleAnimationHelper scaleHelper = new ScaleAnimationHelper(this, 0);
			scaleHelper.ScaleOutAnimation(layout);

			dialog = new Dialog(this, R.style.dialog);
			dialog.setContentView(layout);
			dialog.show();

		}

		new Thread() {
			@Override
			public void run() {
				if (reloadArticleList()) {
					handler.sendEmptyMessage(0);
				}
			}
		}.start();
	}

	private Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {

			if (msg.what == 1) {
				NotificationManager nm = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
				PendingIntent contentIntent = PendingIntent.getActivity(
						MainActivity.this, 0, null, 0);
				Notification n = new Notification(R.drawable.icon_dialog,
						"cnBeta离线下载已完成", System.currentTimeMillis());
				n.setLatestEventInfo(MainActivity.this, "cnBeta离线下载已完成",
						"让新闻飞一会~", contentIntent);
				n.flags = Notification.FLAG_AUTO_CANCEL;
				n.vibrate = new long[] { 0, 200 };
				nm.notify(0, n);
			} else if (!isRefreshing) {
				reloadListView();
				splashImageView.startAnimation(fadeAnim);
				splashImageView.setVisibility(View.GONE);
				LinearLayout splashLayout = (LinearLayout) findViewById(R.id.splashLL);
				splashLayout.startAnimation(fadeAnim);
				splashLayout.setVisibility(View.GONE);
			} else {
				reloadListView();
				ScaleAnimationHelper scaleHelper = new ScaleAnimationHelper(
						MainActivity.this, 0);
				scaleHelper.ScaleInAnimation(layout);
				layout.startAnimation(fadeAnim);
				dialog.dismiss();
			}

			makeCacheDir();

			AvatarEngin avatar = new AvatarEngin();
			avatar.execute();

			listAdapter.notifyDataSetChanged();
		}
	};

	public class ArticleListAdapter extends BaseAdapter {

		ViewHolder holder;

		private LayoutInflater mInflater;

		public ArticleListAdapter(Context context) {
			mInflater = LayoutInflater.from(context);
		}

		@Override
		public int getCount() {
			return articleList.size();
		}

		@Override
		public Object getItem(int position) {
			return position;
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		public View getView(int id, View convertView, ViewGroup parent) {

			if (convertView == null) {
				convertView = mInflater.inflate(R.layout.item_article, null);
				holder = new ViewHolder();
				holder.avatarIV = (ImageView) convertView
						.findViewById(R.id.avatarIV);
				holder.titleTV = (TextView) convertView
						.findViewById(R.id.titleTV);
				holder.infoTV = (TextView) convertView
						.findViewById(R.id.infoTV);

				convertView.setTag(holder);

			} else {
				holder = (ViewHolder) convertView.getTag();
			}

			Article article = articleList.get(id);
			String imgPathString = "/sdcard/.cnBeta/" + avatarList[id] + ".gif";

			File file = new File(imgPathString);
			if (file.exists()) {
				holder.avatarIV.setImageBitmap(BitmapFactory
						.decodeFile(imgPathString));
			} else {
				holder.avatarIV.setImageDrawable(getResources().getDrawable(
						R.drawable.icon));
			}

			holder.titleTV.setText(article.getTitle());
			holder.infoTV.setText(article.getInfo());

			return convertView;
		}

		private class ViewHolder {

			ImageView avatarIV;

			TextView titleTV;

			TextView infoTV;

		}
	}

	class AvatarEngin extends AsyncTask<String, String, String> {
		protected String doInBackground(String... position) {

			avatar = new Avatar(MainActivity.this);

			for (int i = 0; i < articleList.size(); i++) {
				avatarList[i] = avatar.getAvatarImg(articleList.get(i));
			}

			return "result";
		}

		@Override
		protected void onCancelled() {
			super.onCancelled();
		}

		protected void onPostExecute(String result) {
			listAdapter.notifyDataSetChanged();
		}

		@Override
		protected void onPreExecute() {
			listAdapter.notifyDataSetChanged();
		}

		@Override
		protected void onProgressUpdate(String... progress) {
			listAdapter.notifyDataSetChanged();
		}
	}

	private void makeCacheDir() {
		File myFilePath = new File("/sdcard/.cnBeta");
		try {
			if (!Environment.getExternalStorageState().equals(
					Environment.MEDIA_MOUNTED)) {
				new AlertDialog.Builder(MainActivity.this)
						.setMessage("由于您的手机没有安装SD内存卡，新闻图标将无法显示。")
						.setPositiveButton(android.R.string.ok,
								new AlertDialog.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.dismiss();
									}
								}).create().show();
				return;
			}
			if (myFilePath.isDirectory()) {
			} else {
				myFilePath.mkdir();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);
		menu.add(0, 1, 0, "刷新列表").setIcon(R.drawable.ic_menu_refresh);
		menu.add(0, 2, 0, "离线下载").setIcon(R.drawable.ic_menu_download);
		menu.add(0, 3, 0, "意见反馈").setIcon(R.drawable.ic_menu_feedback);
		return true;
	}

	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case 1:
			isRefreshing = true;
			syncArticle();
			break;
		case 2:
			offLineDownload();
			break;
		case 3:
			UMFeedbackService.openUmengFeedbackSDK(this);
			break;
		}
		return true;
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
	}

	@Override
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		Intent intent = new Intent();
		intent.setClass(MainActivity.this, ArticleActivity.class);
		Bundle bl = new Bundle();
		bl.putSerializable("article", articleList.get(arg2));
		bl.putInt("index", arg2);
		intent.putExtras(bl);
		overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left);
		startActivity(intent);
	}

	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			new AlertDialog.Builder(MainActivity.this)
					.setIcon(R.drawable.icon_dialog).setTitle("cnBeta")
					.setMessage("要走啦？")
					.setPositiveButton("是啊", new AlertDialog.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {
							finish();
						}
					})
					.setNegativeButton("不嘛", new AlertDialog.OnClickListener() {
						public void onClick(DialogInterface dialog, int id) {
						}
					}).show();
		}

		return false;
	}

	public void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
	}

	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}
}